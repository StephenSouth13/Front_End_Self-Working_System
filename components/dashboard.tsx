"use client"

import { useState, useEffect } from "react"
import { CheckCircle2, Clock, Target, TrendingUp, Zap, Award, Calendar, Activity } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { CalendarWidget } from "@/components/calendar-widget"
import { FloatingStudyTimer } from "@/components/floating-study-timer"

const motivationalQuotes = [
  "H√¥m nay l√† m·ªôt ng√†y tuy·ªát v·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üåü",
  "M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu d·∫´n ƒë·∫øn th√†nh c√¥ng l·ªõn. üöÄ",
  "H√£y t·∫≠p trung v√†o nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ ki·ªÉm so√°t. üí™",
  "Th√†nh c√¥ng b·∫Øt ƒë·∫ßu t·ª´ vi·ªác h√†nh ƒë·ªông. ‚ö°",
  "H√¥m nay t·ªët h∆°n h√¥m qua, ng√†y mai t·ªët h∆°n h√¥m nay! üåà",
  "D√π ch·∫≠m c≈©ng kh√¥ng sao, mi·ªÖn l√† b·∫°n kh√¥ng d·ª´ng l·∫°i. üê¢",

"B·∫°n m·∫°nh m·∫Ω h∆°n nh·ªØng g√¨ b·∫°n nghƒ©. üß†üí™",

"T·ª´ng ng√†y tr√¥i qua l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i. üåÖ",
"C·ª© ti·∫øn l√™n, d√π l√† t·ª´ng b∆∞·ªõc nh·ªè. üêæ",

"M·ªói ng√†y l√† m·ªôt m√≥n qu√† ‚Äì h√£y tr√¢n tr·ªçng n√≥. üéÅ",

"T∆∞∆°ng lai ƒë∆∞·ª£c t·∫°o n√™n t·ª´ nh·ªØng vi·ªác b·∫°n l√†m h√¥m nay. ‚è≥",

"H√£y l√† ngu·ªìn c·∫£m h·ª©ng m√† b·∫°n ƒëang t√¨m ki·∫øm. üîç‚ú®",

"ƒê·ª´ng ƒë·ª£i c∆° h·ªôi, h√£y t·∫°o ra n√≥. üõ†Ô∏è",

"Ni·ªÅm tin nh·ªè h√¥m nay c√≥ th·ªÉ d·∫´n ƒë·∫øn ƒëi·ªÅu k·ª≥ di·ªáu ng√†y mai. üå±",

"H√£y t·ª± h√†o v·ªÅ t·ª´ng n·ªó l·ª±c c·ªßa ch√≠nh m√¨nh. üèÜ",

"√Ånh s√°ng lu√¥n ch·ªù b·∫°n ·ªü cu·ªëi con ƒë∆∞·ªùng. üî¶",

"Kh√¥ng ai ho√†n h·∫£o ‚Äì ƒëi·ªÅu quan tr·ªçng l√† b·∫°n kh√¥ng ng·ª´ng c·ªë g·∫Øng. üíñ",

"Ch√≠nh nh·ªØng ƒëi·ªÅu nh·ªè b√© t·∫°o n√™n s·ª± kh√°c bi·ªát l·ªõn. ‚ú®",

"M·ªói ng√†y l√† m·ªôt trang gi·∫•y tr·∫Øng ‚Äì b·∫°n l√† ng∆∞·ªùi c·∫ßm b√∫t. ‚úçÔ∏è",

"N·ª• c∆∞·ªùi l√† ng√¥n ng·ªØ c·ªßa hy v·ªçng. üòä",

"T√¨nh y√™u v√† s·ª± t·ª≠ t·∫ø lu√¥n l√† nh·ªØng l·ª±a ch·ªçn ƒë√∫ng ƒë·∫Øn. üíõ",

"C·ª© m∆° ƒëi, v√† h√†nh ƒë·ªông ƒë·ªÉ gi·∫•c m∆° th√†nh hi·ªán th·ª±c. ‚òÅÔ∏èüö∂",

"D√π tr·ªùi c√≥ m∆∞a, b·∫°n v·∫´n c√≥ th·ªÉ l√† c·∫ßu v·ªìng. üåßÔ∏èüåà",

"Gi·ªØ cho tr√°i tim b·∫°n ·∫•m v√† t√¢m h·ªìn b·∫°n nh·∫π. üî•üïäÔ∏è",

"M·ªôt l·ªùi ƒë·ªông vi√™n nh·ªè c√≥ th·ªÉ thay ƒë·ªïi c·∫£ ng√†y c·ªßa ai ƒë√≥. üíå"
]

const todayTasks = [
  { id: "1", title: "Ho√†n th√†nh b√°o c√°o th√°ng", space: "C√¥ng ty", completed: false, priority: "high" },
  { id: "2", title: "G·ªçi ƒëi·ªán cho kh√°ch h√†ng ABC", space: "C√¥ng ty", completed: true, priority: "medium" },
  { id: "3", title: "H·ªçc React hooks", space: "H·ªçc t·∫≠p", completed: false, priority: "low" },
  { id: "4", title: "C·∫≠p nh·∫≠t portfolio", space: "D·ª± √°n ngo√†i", completed: false, priority: "medium" },
  { id: "5", title: "Review code team", space: "C√¥ng ty", completed: true, priority: "high" },
]

const todaySchedule = [
  { time: "09:00", title: "H·ªçp team weekly", type: "meeting", status: "upcoming" },
  { time: "14:00", title: "Ph·ªèng v·∫•n ·ª©ng vi√™n", type: "interview", status: "current" },
  { time: "16:30", title: "Review code v·ªõi senior", type: "review", status: "upcoming" },
  { time: "18:00", title: "H·ªçc online course", type: "learning", status: "upcoming" },
]

const habits = [
  { id: "1", name: "T·∫≠p gym", completed: true, streak: 7 },
  { id: "2", name: "ƒê·ªçc s√°ch 30 ph√∫t", completed: false, streak: 3 },
  { id: "3", name: "Thi·ªÅn 10 ph√∫t", completed: false, streak: 5 },
  { id: "4", name: "U·ªëng 8 ly n∆∞·ªõc", completed: true, streak: 12 },
  { id: "5", name: "Vi·∫øt nh·∫≠t k√Ω", completed: false, streak: 2 },
]

export function Dashboard() {
  const [tasks, setTasks] = useState(todayTasks)
  const [userHabits, setUserHabits] = useState(habits)
  const [currentTime, setCurrentTime] = useState(new Date())

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000)
    return () => clearInterval(timer)
  }, [])

  const currentHour = currentTime.getHours()
  const greeting = currentHour < 12 ? "Ch√†o bu·ªïi s√°ng" : currentHour < 18 ? "Ch√†o bu·ªïi chi·ªÅu" : "Ch√†o bu·ªïi t·ªëi"
  const greetingEmoji = currentHour < 12 ? "üåÖ" : currentHour < 18 ? "‚òÄÔ∏è" : "üåô"
  const randomQuote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)]

  const completedTasks = tasks.filter((task) => task.completed).length
  const completedHabits = userHabits.filter((habit) => habit.completed).length
  const totalProductivity = Math.round((completedTasks / tasks.length + completedHabits / userHabits.length) * 50)

  const toggleTask = (taskId: string) => {
    setTasks(tasks.map((task) => (task.id === taskId ? { ...task, completed: !task.completed } : task)))
  }

  const toggleHabit = (habitId: string) => {
    setUserHabits(userHabits.map((habit) => (habit.id === habitId ? { ...habit, completed: !habit.completed } : habit)))
  }

  const getScheduleStatus = (status: string) => {
    switch (status) {
      case "current":
        return "bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 border-green-200 dark:border-green-700"
      case "upcoming":
        return "bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 border-blue-200 dark:border-blue-700"
      default:
        return "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-200 dark:border-gray-700"
    }
  }

  return (
    <div className="min-h-screen gradient-bg">
      <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto">
        {/* Greeting */}
        <div className="mb-8 animate-fade-in">
          <div className="glass-effect rounded-2xl p-6 sm:p-8">
            <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 dark:!text-white mb-3">
              {greeting}, Qu√°ch Th√†nh Long! {greetingEmoji}
            </h1>
            <p className="text-gray-600 dark:!text-gray-300 text-base sm:text-lg italic font-medium">"{randomQuote}"</p>
            <div className="mt-4 flex flex-wrap gap-2">
              <Badge
                variant="secondary"
                className="bg-green-100 dark:bg-green-900/30 text-green-700 dark:!text-green-300"
              >
                <Activity className="w-3 h-3 mr-1" />
                NƒÉng su·∫•t: {totalProductivity}%
              </Badge>
              <Badge variant="secondary" className="bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:!text-blue-300">
                <Zap className="w-3 h-3 mr-1" />
                Streak: {Math.max(...userHabits.map((h) => h.streak))} ng√†y
              </Badge>
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8 animate-slide-up">
          <Card className="card-hover glass-effect border-0">
            <CardContent className="p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-600 dark:!text-gray-400">C√¥ng vi·ªác h√¥m nay</p>
                  <p className="text-2xl sm:text-3xl font-bold text-gray-900 dark:!text-white">
                    {completedTasks}/{tasks.length}
                  </p>
                  <Progress value={(completedTasks / tasks.length) * 100} className="mt-2 h-2" />
                </div>
                <div className="p-3 bg-green-100 dark:bg-green-900/30 rounded-xl flex-shrink-0 ml-4">
                  <CheckCircle2 className="w-6 h-6 sm:w-8 sm:h-8 text-green-600 dark:text-green-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="card-hover glass-effect border-0">
            <CardContent className="p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-600 dark:!text-gray-400">Th√≥i quen</p>
                  <p className="text-2xl sm:text-3xl font-bold text-gray-900 dark:!text-white">
                    {completedHabits}/{userHabits.length}
                  </p>
                  <Progress value={(completedHabits / userHabits.length) * 100} className="mt-2 h-2" />
                </div>
                <div className="p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex-shrink-0 ml-4">
                  <Target className="w-6 h-6 sm:w-8 sm:h-8 text-blue-600 dark:text-blue-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="card-hover glass-effect border-0">
            <CardContent className="p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-600 dark:!text-gray-400">Cu·ªôc h·ªçp</p>
                  <p className="text-2xl sm:text-3xl font-bold text-gray-900 dark:!text-white">
                    {todaySchedule.length}
                  </p>
                  <p className="text-xs text-gray-500 dark:!text-gray-400 mt-1 truncate">
                    Ti·∫øp theo: {todaySchedule.find((s) => s.status === "upcoming")?.time || "Kh√¥ng c√≥"}
                  </p>
                </div>
                <div className="p-3 bg-orange-100 dark:bg-orange-900/30 rounded-xl flex-shrink-0 ml-4">
                  <Clock className="w-6 h-6 sm:w-8 sm:h-8 text-orange-600 dark:text-orange-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="card-hover glass-effect border-0">
            <CardContent className="p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-600 dark:!text-gray-400">Hi·ªáu su·∫•t</p>
                  <p className="text-2xl sm:text-3xl font-bold text-gray-900 dark:!text-white">{totalProductivity}%</p>
                  <div className="flex items-center gap-1 mt-1">
                    <TrendingUp className="w-3 h-3 text-green-500 flex-shrink-0" />
                    <span className="text-xs text-green-600 dark:text-green-400 truncate">+12% t·ª´ h√¥m qua</span>
                  </div>
                </div>
                <div className="p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex-shrink-0 ml-4">
                  <Award className="w-6 h-6 sm:w-8 sm:h-8 text-purple-600 dark:text-purple-400" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8">
          {/* Priority Tasks */}
          <Card className="xl:col-span-2 glass-effect border-0 card-hover">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-lg sm:text-xl">
                <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                  <Target className="w-5 h-5 text-green-600 dark:text-green-400" />
                </div>
                <span className="text-gray-900 dark:!text-white">∆Øu Ti√™n H√¥m Nay</span>
                <Badge variant="secondary" className="ml-auto">
                  {tasks.length} c√¥ng vi·ªác
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {tasks.map((task, index) => (
                <div
                  key={task.id}
                  className="flex items-center gap-4 p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50 hover:bg-gray-50/50 dark:hover:bg-gray-800/50 transition-all duration-300 animate-fade-in"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <Checkbox
                    checked={task.completed}
                    onCheckedChange={() => toggleTask(task.id)}
                    className="data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500 flex-shrink-0"
                  />
                  <div className="flex-1 min-w-0">
                    <p
                      className={`font-medium text-sm sm:text-base transition-all duration-300 line-clamp-1 ${
                        task.completed
                          ? "line-through text-gray-500 dark:!text-gray-400"
                          : "text-gray-900 dark:!text-white"
                      }`}
                    >
                      {task.title}
                    </p>
                    <div className="flex items-center gap-2 mt-2 flex-wrap">
                      <Badge variant="secondary" className="text-xs">
                        {task.space}
                      </Badge>
                      <Badge
                        variant={
                          task.priority === "high"
                            ? "destructive"
                            : task.priority === "medium"
                              ? "default"
                              : "secondary"
                        }
                        className="text-xs"
                      >
                        {task.priority === "high" ? "üî• Cao" : task.priority === "medium" ? "‚ö° Trung b√¨nh" : "üìù Th·∫•p"}
                      </Badge>
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Today's Schedule */}
          <Card className="glass-effect border-0 card-hover">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-lg sm:text-xl">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                  <Calendar className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                </div>
                L·ªãch Tr√¨nh H√¥m Nay
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {todaySchedule.map((event, index) => (
                <div
                  key={index}
                  className={`flex items-start gap-4 p-3 rounded-xl border transition-all duration-300 animate-fade-in ${getScheduleStatus(event.status)}`}
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <div className="text-sm font-bold min-w-[50px]">{event.time}</div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">{event.title}</p>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="outline" className="text-xs">
                        {event.type === "meeting"
                          ? "üìÖ H·ªçp"
                          : event.type === "interview"
                            ? "üë• Ph·ªèng v·∫•n"
                            : event.type === "review"
                              ? "üîç Review"
                              : "üìö H·ªçc t·∫≠p"}
                      </Badge>
                      {event.status === "current" && (
                        <div className="flex items-center gap-1">
                          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                          <span className="text-xs font-medium">ƒêang di·ªÖn ra</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Habits Tracking */}
        <Card className="mt-8 glass-effect border-0 card-hover">
          <CardHeader className="pb-4">
            <CardTitle className="flex items-center gap-3 text-lg sm:text-xl">
              <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
                <TrendingUp className="w-5 h-5 text-purple-600 dark:text-purple-400" />
              </div>
              Theo D√µi Th√≥i Quen
              <Badge variant="secondary" className="ml-auto">
                {completedHabits}/{userHabits.length} ho√†n th√†nh
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4 mb-6">
              {userHabits.map((habit, index) => (
                <div
                  key={habit.id}
                  className="flex flex-col gap-3 p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50 hover:bg-gray-50/50 dark:hover:bg-gray-800/50 transition-all duration-300 animate-fade-in"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <div className="flex items-center gap-3">
                    <Checkbox
                      checked={habit.completed}
                      onCheckedChange={() => toggleHabit(habit.id)}
                      className="data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500"
                    />
                    <span
                      className={`text-sm font-medium flex-1 transition-all duration-300 ${
                        habit.completed
                          ? "line-through text-gray-500 dark:text-gray-400"
                          : "text-gray-900 dark:text-white"
                      }`}
                    >
                      {habit.name}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs">
                      üî• {habit.streak} ng√†y
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Ti·∫øn ƒë·ªô h√¥m nay</span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {completedHabits}/{userHabits.length} ({Math.round((completedHabits / userHabits.length) * 100)}%)
                </span>
              </div>
              <Progress value={(completedHabits / userHabits.length) * 100} className="h-3" />
            </div>
          </CardContent>
        </Card>

        {/* Calendar Widget */}
        <div className="mt-8">
          <CalendarWidget />
        </div>
      </div>
      <FloatingStudyTimer />
    </div>
  )
}
